{"version":3,"sources":["../../src/components/circle.js"],"names":["Circle","props","displayName","setupListeners","bind","state","circle","focus","map","fitBounds","getBounds","maps","event","addListener","onRadiusChange","getRadius","onCenterChange","getCenter","toJSON","onClick","Object","assign","coords","e","latLng","onRightClick","f","console","error","Error","prevProps","prevState","currCenter","LatLng","center","prevCenter","equals","setCenter","radius","setRadius","CircleOptions","undefined","setState","clearListeners","setMap","children","Component","number","shape","propTypes","isRequired","lat","lng"],"mappings":"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","file":"circle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {mapChildren} from '../utils/utils';\n/** Defines a circle shape in the map. Relates to google.maps.Circle class.\n* @property {object} props\n* @property {number} props.radius\n* @property {object} props.center\n* @property {number} props.center.lat\n* @property {number} props.center.lng\n* @property {function} props.onRadiusChange\n* @property {function} props.onCenterChange\n\n*/\nclass Circle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'Circle';\n        this.setupListeners = this.setupListeners.bind(this);\n        this.state = {circle : null};\n\n        this.focus = this.focus.bind(this);\n    }\n    /** Focus the map on this circle. */\n    focus() {\n    \tvar {circle} = this.state;\n    \tvar {map} = this.state;\n    \tif(circle && map) {\n    \t\tmap.fitBounds(circle.getBounds());\n    \t}\n    }\n    /** Setup the listeners for this circle */\n    setupListeners() {\n\n    \tvar {circle} = this.state;\n    \tvar {maps, map} = this.props;\n    \tif(maps && circle) {\n    \t\tmaps.event.addListener(circle, 'radius_changed',e => {\n    \t\t\tif(typeof this.props.onRadiusChange === 'function')\n    \t\t\t\tthis.props.onRadiusChange(circle.getRadius());\n    \t\t});\n    \t\tmaps.event.addListener(circle, 'center_changed', e => {\n    \t\t\tif(typeof this.props.onCenterChange === 'function')\n    \t\t\t\tthis.props.onCenterChange(circle.getCenter().toJSON());\n    \t\t});\n    \t\tmaps.event.addListener(circle, 'click', e => {\n    \t\t\tif(typeof this.props.onClick === 'function')\n    \t\t\t\tthis.props.onClick(Object.assign({coords : circle.getCenter().toJSON()},e));\n    \t\t});\n    \t\tmaps.event.addListener(circle, 'rightclick', ({latLng}) =>\n    \t\t\ttypeof this.props.onRightClick === 'function' ? this.props.onRightClick({coords:latLng.toJSON()}) : f => f);\n    \t}\n    \telse\n    \t\tconsole.error(new Error(\"You must pass maps and map to this component. Otherwise, run it inside a map component.\"));\n    }\n    componentDidUpdate(prevProps, prevState) {\n    \tvar currCenter = new this.props.maps.LatLng(this.props.center);\n    \tvar prevCenter = this.state.circle.getCenter();\n\n    \tif(!currCenter.equals(prevCenter))\n    \t\tthis.state.circle.setCenter(currCenter);\n\n    \tif(this.props.radius != this.state.circle.getRadius())\n    \t\tthis.state.circle.setRadius(this.props.radius);\n    }\n    componentWillMount() {\n    \tvar {\n    \t\tmap,\n    \t\tmaps,\n    \t} = this.props;\n\n    \tif(map && maps) {\n    \t\tvar CircleOptions = Object.assign({}, this.props, {maps : undefined});\n    \t\tvar circle = new maps.Circle(CircleOptions);\n    \t\tthis.setState({circle}, this.setupListeners);\n    \t}\n    }\n    componentWillUnmount() {\n       if(this.state.circle) {\n            this.props.maps.event.clearListeners(this.state.circle);\n       \t\tthis.state.circle.setMap(null);\n       }\n    }\n    render() {\n    \tvar children = [];\n    \tif(this.props.children && this.props.maps && this.props.map)\n    \t\tchildren = mapChildren({\n    \t\t\tcoords : this.state.circle.getCenter().toJSON()\n    \t\t}, this);\n        return <div>{children}</div>;\n    }\n}\n\nvar {number, shape} = PropTypes;\n\nCircle.propTypes = {\n\tradius : number.isRequired,\n\tcenter : shape({\n\t\tlat : number,\n\t\tlng : number\n\t}).isRequired\n}\nexport default Circle;\n"]}