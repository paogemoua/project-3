{"version":3,"sources":["../../src/components/dataLayer.js"],"names":["DataLayer","props","displayName","state","data","initDataLayer","bind","checkPropVisibility","checkPropDrawingMode","styleFeatures","focus","maps","map","bounds","LatLngBounds","forEach","feature","getGeometry","extend","fitBounds","cb","dataOptions","Object","assign","style","featureFactory","Data","Feature","geometry","item","id","dataLayer","geoJson","options","idPropertyName","addGeoJson","setState","nextProps","visible","setMap","drawingMode","setDrawingMode","geo","type","getType","getProperty","zIndex","strokeColor","fillColor","fillOpacity","polyOptions","strokeWeight","console","error","Error","addListener","onCreate","event","getId","toGeoJson","jj","setTimeout","createdFeature","getFeatureById","remove","prevProps","prevState","nextState","children","Children","cloneElement","child","featureStyleFactory","Component","propTypes","object","bool","onChange","func","number","isRequired","oneOf"],"mappings":"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","file":"dataLayer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {processPoints} from '../utils/utils';\n\nclass DataLayer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'DataLayer';\n        this.state = {\n          data : null\n        }\n\n        this.initDataLayer = this.initDataLayer.bind(this);\n\n        //Prop Checking\n        this.checkPropVisibility = this.checkPropVisibility.bind(this);\n        this.checkPropDrawingMode = this.checkPropDrawingMode.bind(this);\n\n        //Style\n        this.styleFeatures = this.styleFeatures.bind(this);\n\n        //Focus\n        this.focus = this.focus.bind(this);\n\n    }\n    /** Focus the map on this dataLayer's features. */\n    focus(){\n        var {maps,map} = this.props;\n        var bounds = new maps.LatLngBounds();\n        if(this.state.data) {\n            this.state.data.forEach((feature)=>{\n                processPoints(feature.getGeometry(), bounds.extend, bounds);\n            });\n            map.fitBounds(bounds);\n        }\n    }\n    initDataLayer(cb) {\n      var {map, maps} = this.props;\n\n    var dataOptions = {\n      map\n       }\n\n       if(this.props.dataOptions)\n         dataOptions = Object.assign(dataOptions, this.props.dataOptions);\n\n       dataOptions = Object.assign(dataOptions, {\n         style : this.styleFeatures,\n         featureFactory: item => {\n           return new maps.Data.Feature({\n             geometry: item,\n             id: '___INTERNAL_BRAND_NEW___'\n           });\n         },\n       })\n\n       var dataLayer = new maps.Data(dataOptions)\n\n       //If there is geoJSON, initialize it.\n       if(this.props.geoJson) {\n         var options = { idPropertyName : '_id' };\n         if(this.props.idPropertyName)\n           options.idPropertyName = this.props.idPropertyName;\n\n         dataLayer.addGeoJson(this.props.geoJson, options);\n       }\n\n        // dataLayer.addListener('click', (event) => {\n        //   var {feature} = event;\n        //   var coords = event.latLng.toJSON()\n        //   coords[0] = coords.lng;\n        //   coords[1] = coords.lat;\n\n        //   if(this.props.onClick)\n        //     this.props.onClick({id : feature.getId(), coords });\n\n        // });\n       this.setState({ data : dataLayer }, cb);\n\n    }\n\n    checkPropVisibility(nextProps) {\n      var {visible} = this.props;\n\n      if(!visible && nextProps.visible) {\n        this.state.data.setMap(this.props.map);\n      }\n      else if(visible && !nextProps.visible)\n        this.state.data.setMap(null);\n    }\n    checkPropDrawingMode(props) {\n      const { drawingMode } = props;\n      if(!this.state.data) return;\n      if(!drawingMode) {\n        return this.state.data.setDrawingMode(null);\n      }\n      return this.state.data.setDrawingMode(drawingMode);\n    }\n    styleFeatures(feature) {\n      //If they passed in a function to completely overide style features, then do so.\n\n      if(this.props.styleFeatures)\n        return this.props.styleFeatures(feature);\n\n        var geo = feature.getGeometry();\n        var type = null;\n        if(geo)\n            type = geo.getType();\n\n        var visible = feature.getProperty('visible');\n        var zIndex = feature.getProperty('zIndex');\n        var strokeColor = feature.getProperty('strokeColor');\n        var fillColor = feature.getProperty('fillColor');\n        var fillOpacity = this.props.fillOpacity;\n\n        //Do some logic on the options to make things a bit easier.\n        if(!strokeColor)\n          strokeColor = fillColor;\n\n        zIndex = typeof zIndex === 'number' ? zIndex : 10;\n\n        if(this.props.zIndex)\n          zIndex = zIndex + (10000 * this.props.zIndex) //TODO: Find a better way to separate out layer zIndexes. Right now we are defautling to 10000K features in a GeoJson schema. It works, but there should be a better way.\n\n        switch(type) {\n          case 'Polygon':\n            var polyOptions = {\n              strokeWeight : 1,\n              strokeColor,\n              fillColor,\n              fillOpacity,\n            } //Potential Enhancement: Polyoptions could have different defaults. For now, we will leave this.\n\n            if(typeof visible !== 'undefined')\n              polyOptions.visible = true;\n            if(typeof zIndex !== 'undefined');\n              polyOptions.zIndex = zIndex;\n            return polyOptions;\n          default:\n            return {}\n        }\n    }\n    componentWillMount() {\n      if(this.props.maps && this.props.map) {\n        this.initDataLayer(f => {\n          this.checkPropVisibility(this.props);\n          this.checkPropDrawingMode(this.props);\n        });\n      }\n      else\n        console.error(new Error(\"You must put this compenent in a <Map /> context component or provide the maps and map props manually.\"))\n    }\n    componentDidMount() {\n      this.state.data.addListener('addfeature', event => {\n        if(this.props.drawingMode) {\n          if(this.props.onCreate) {\n            if(event.feature.getId() == '___INTERNAL_BRAND_NEW___') {\n              event.feature.toGeoJson(jj => {\n                this.props.onCreate(jj, event.feature);\n                setTimeout(f => {\n                  const createdFeature = this.state.data.getFeatureById(event.feature.getId());\n                  this.state.data.remove(createdFeature);\n                }, 100);\n              });\n            }\n          }\n        }\n      })\n    }\n    componentWillUnmount() {\n      this.state.data.setMap(null);\n      this.setState({data : null})\n    }\n    componentDidUpdate(prevProps, prevState) {\n\n    }\n    componentWillReceiveProps(nextProps) {\n      if(typeof nextProps.visible !== 'undefined') {\n         this.checkPropVisibility(nextProps);\n      }\n\n      if (nextProps.drawingMode !== this.props.drawingMode) {\n        this.checkPropDrawingMode(nextProps)\n      }\n    }\n     shouldComponentUpdate(nextProps, nextState) {\n       return true;\n     }\n     componentWillUpdate(nextProps, nextState) {\n     }\n    render() {\n      var children = []\n\n      if(this.state.data) {\n        children = React.Children.map(this.props.children, child => React.cloneElement(child, {\n          maps : this.props.maps,\n          map : this.props.map,\n          data : this.state.data,\n          featureStyleFactory: this.styleFeatures\n        }));\n      }\n        return <div>{children}</div>;\n    }\n}\n\nDataLayer.propTypes = {\n    maps : PropTypes.object,\n    map : PropTypes.object,\n    dataOptions : PropTypes.object,\n    geoJson : PropTypes.object,\n    visible : PropTypes.bool,\n    onChange : PropTypes.func,\n    styleFeatures : PropTypes.func,\n    zIndex : PropTypes.number.isRequired,\n    fillOpacity : PropTypes.number,\n    onCreate: PropTypes.func,\n    drawingMode: PropTypes.oneOf([ 'Point', 'LineString', 'Polygon' ])\n}\n\nexport default DataLayer;\n"]}