{"version":3,"sources":["../../src/components/infoWindow.js"],"names":["InfoWindow","props","displayName","state","infoWindow","anchor","loadInfoWindowContent","bind","ref","node","maps","map","coords","options","position","undefined","open","close","event","addListener","onCloseClick","e","setState","console","error","findDOMNode","infoWindowChildren","setContent","parent","child","appendChild","name","item","cleanInfoWindowContentForUnmount","prevProps","prevState","lat","lng","setPosition","children","Component","propTypes","object","shape","number","isRequired","func"],"mappings":"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","file":"infoWindow.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDom from 'react-dom';\n\n/** The component designed to implement the google.maps.InfoWindow class. This component can be the child of either the `<Map />` or `<Marker />` components, but if you decide to put it within the `<Map />` component you must set its coordinate property so that it has an anchor point.\n* @memberof Map\n*\n* @property {object} props\n* @property {google.maps} props.maps Required.\n* @property {google.maps.Map} props.map Required.\n* @property {google.maps.MVCObject} props.anchor Required if coordinates aren't provided.\n* @property {object} props.coords Required if anchor isn't provided.\n* @property {number} props.coords.lng\n* @property {number} props.coords.lat\n* @property {bool} props.disableAutopan\n* @property {number} props.maxWidth\n* @property {object} props.pixelOffset\n* @property {object} props.pixelOffset.width\n* @property {object} props.pixelOffset.height\n* @property {google.maps.InfoWindowOptions} props.options These will overwrite any of the convenience props above. See [google.maps.InfoWindowOptions]{@link https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindowOptions} documentation for all the options.\n* @property {bool} props.open Allows you to open and close a window without fully unmounting it.\n* @property {object} state\n* @property {google.maps.InfoWindow} state.infoWindow The internal instance of the infoWindow.\n* @property {function} props.onCloseClick Use this to listen for the close click event. When someone tries to close the infowindow. Implement closing.\n*/\n\nclass InfoWindow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'InfoWindow';\n        this.state = {\n        \tinfoWindow : null,\n        \tanchor : null\n        }\n\n        this.loadInfoWindowContent = this.loadInfoWindowContent.bind(this);\n        this.ref = this.ref.bind(this);\n        this.node = null;\n    }\n    componentWillMount() {\n    \t  var {maps, map, anchor, coords} = this.props;\n          if(maps && map) {\n          \tvar options = {\n          \t\tposition : anchor? undefined : coords\n          \t}\n          \tvar infoWindow = new maps.InfoWindow(options)\n          \tif(this.props.open)\n\t          \tinfoWindow.open(map, anchor);\n\t        else\n\t        \tinfoWindow.close()\n          \t//Don't let the infowindow do it's default thing when a user tries to close it.\n    \t\tmaps.event.addListener(infoWindow, 'closeclick', e => {\n\t    \t\tif(typeof this.props.onCloseClick === 'function')\n\t    \t\t\tthis.props.onCloseClick(e);\n    \t\t});\n\n          \tthis.setState({infoWindow, anchor})\n          }\n          else {\n          \tconsole.error(\"InfoWindow must live inside of a <Map /> component context.\")\n          }\n    }\n\t/** Load rendered children into infoWindow.\n\t* @return {undefined}\n\t*/\n    loadInfoWindowContent() {\n    \tif(this.state.infoWindow) {\n\n\t    \tthis.node = ReactDom.findDOMNode(this.infoWindowChildren);\n    \t\tthis.state.infoWindow.setContent(this.node); //Set infowindow content\n\n    \t}\n\n    }\n    /** Place rendered children back into their normal location to await their destruction.\n    * @return {undefined}\n    */\n    cleanInfoWindowContentForUnmount() {\n    \t//Undo our previous dom manipulation.\n      \tvar parent = ReactDom.findDOMNode(this);\n      \tvar child = this.node;\n      \tparent.appendChild(child);\n    }\n    ref(name) {\n      return (item) => {\n        this[name] = item;\n      };\n    }\n    componentDidMount() {\n\n    \tthis.loadInfoWindowContent()\n    }\n    componentWillUnmount() {\n    \tif(this.state.infoWindow)\n\t    \tthis.state.infoWindow.open(null);\n        this.setState({infoWindow : null});\n        this.cleanInfoWindowContentForUnmount();\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n    \tif(this.state.infoWindow) {\n    \t\tif(this.props.open && !prevProps.open)\n\t\t      \tthis.state.infoWindow.open(this.props.map, this.state.anchor);\n\t    \telse if(!this.props.open && prevProps.open)\n\t    \t\tthis.state.infoWindow.close();\n    \t}\n\n    \tif(!this.node)\n\t    \tthis.loadInfoWindowContent();\n\n    \tvar {coords} = this.props;\n\n\t\tif(!prevProps.coords || (coords.lat != prevProps.coords.lat && coords.lng != prevProps.coords.lng))\n\t\t\tthis.state.infoWindow.setPosition(this.props.coords);\n\n    }\n    render() {\n\n        return <div><div ref={this.ref(\"infoWindowChildren\")}>{this.props.children}</div></div>;\n    }\n}\n\nInfoWindow.propTypes = {\n\tmaps : PropTypes.object,\n\tmap : PropTypes.object,\n\tcoords : PropTypes.shape({\n\t\tlat : PropTypes.number.isRequired,\n\t\tlng : PropTypes.number.isRequired\n\t}),\n\tonCloseClick : PropTypes.func\n}\n\nexport default InfoWindow;\n"]}